#! /usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright (c) 2014, Nicolas P. Rougier. All Rights Reserved.
# Distributed under the (new) BSD License.
# -----------------------------------------------------------------------------
import datetime
import numpy as np
from glumpy import app, gl, gloo, glm

# Translated from
# http://www.piclist.com/tecHREF/datafile/charset/extractor/charset_extractor.htm
font_6x8 = np.array([
    (0x00,0x00,0x00,0x00,0x00,0x00), (0x10,0xE3,0x84,0x10,0x01,0x00),
    (0x6D,0xB4,0x80,0x00,0x00,0x00), (0x00,0xA7,0xCA,0x29,0xF2,0x80),
    (0x20,0xE4,0x0C,0x09,0xC1,0x00), (0x65,0x90,0x84,0x21,0x34,0xC0),
    (0x21,0x45,0x08,0x55,0x23,0x40), (0x30,0xC2,0x00,0x00,0x00,0x00),
    (0x10,0x82,0x08,0x20,0x81,0x00), (0x20,0x41,0x04,0x10,0x42,0x00),
    (0x00,0xA3,0x9F,0x38,0xA0,0x00), (0x00,0x41,0x1F,0x10,0x40,0x00),
    (0x00,0x00,0x00,0x00,0xC3,0x08), (0x00,0x00,0x1F,0x00,0x00,0x00),
    (0x00,0x00,0x00,0x00,0xC3,0x00), (0x00,0x10,0x84,0x21,0x00,0x00),
    (0x39,0x14,0xD5,0x65,0x13,0x80), (0x10,0xC1,0x04,0x10,0x43,0x80),
    (0x39,0x10,0x46,0x21,0x07,0xC0), (0x39,0x10,0x4E,0x05,0x13,0x80),
    (0x08,0x62,0x92,0x7C,0x20,0x80), (0x7D,0x04,0x1E,0x05,0x13,0x80),
    (0x18,0x84,0x1E,0x45,0x13,0x80), (0x7C,0x10,0x84,0x20,0x82,0x00),
    (0x39,0x14,0x4E,0x45,0x13,0x80), (0x39,0x14,0x4F,0x04,0x23,0x00),
    (0x00,0x03,0x0C,0x00,0xC3,0x00), (0x00,0x03,0x0C,0x00,0xC3,0x08),
    (0x08,0x42,0x10,0x20,0x40,0x80), (0x00,0x07,0xC0,0x01,0xF0,0x00),
    (0x20,0x40,0x81,0x08,0x42,0x00), (0x39,0x10,0x46,0x10,0x01,0x00),
    (0x39,0x15,0xD5,0x5D,0x03,0x80), (0x39,0x14,0x51,0x7D,0x14,0x40),
    (0x79,0x14,0x5E,0x45,0x17,0x80), (0x39,0x14,0x10,0x41,0x13,0x80),
    (0x79,0x14,0x51,0x45,0x17,0x80), (0x7D,0x04,0x1E,0x41,0x07,0xC0),
    (0x7D,0x04,0x1E,0x41,0x04,0x00), (0x39,0x14,0x17,0x45,0x13,0xC0),
    (0x45,0x14,0x5F,0x45,0x14,0x40), (0x38,0x41,0x04,0x10,0x43,0x80),
    (0x04,0x10,0x41,0x45,0x13,0x80), (0x45,0x25,0x18,0x51,0x24,0x40),
    (0x41,0x04,0x10,0x41,0x07,0xC0), (0x45,0xB5,0x51,0x45,0x14,0x40),
    (0x45,0x95,0x53,0x45,0x14,0x40), (0x39,0x14,0x51,0x45,0x13,0x80),
    (0x79,0x14,0x5E,0x41,0x04,0x00), (0x39,0x14,0x51,0x55,0x23,0x40),
    (0x79,0x14,0x5E,0x49,0x14,0x40), (0x39,0x14,0x0E,0x05,0x13,0x80),
    (0x7C,0x41,0x04,0x10,0x41,0x00), (0x45,0x14,0x51,0x45,0x13,0x80),
    (0x45,0x14,0x51,0x44,0xA1,0x00), (0x45,0x15,0x55,0x55,0x52,0x80),
    (0x45,0x12,0x84,0x29,0x14,0x40), (0x45,0x14,0x4A,0x10,0x41,0x00),
    (0x78,0x21,0x08,0x41,0x07,0x80), (0x38,0x82,0x08,0x20,0x83,0x80),
    (0x01,0x02,0x04,0x08,0x10,0x00), (0x38,0x20,0x82,0x08,0x23,0x80),
    (0x10,0xA4,0x40,0x00,0x00,0x00), (0x00,0x00,0x00,0x00,0x00,0x3F),
    (0x30,0xC1,0x00,0x00,0x00,0x00), (0x00,0x03,0x81,0x3D,0x13,0xC0),
    (0x41,0x07,0x91,0x45,0x17,0x80), (0x00,0x03,0x91,0x41,0x13,0x80),
    (0x04,0x13,0xD1,0x45,0x13,0xC0), (0x00,0x03,0x91,0x79,0x03,0x80),
    (0x18,0x82,0x1E,0x20,0x82,0x00), (0x00,0x03,0xD1,0x44,0xF0,0x4E),
    (0x41,0x07,0x12,0x49,0x24,0x80), (0x10,0x01,0x04,0x10,0x41,0x80),
    (0x08,0x01,0x82,0x08,0x24,0x8C), (0x41,0x04,0x94,0x61,0x44,0x80),
    (0x10,0x41,0x04,0x10,0x41,0x80), (0x00,0x06,0x95,0x55,0x14,0x40),
    (0x00,0x07,0x12,0x49,0x24,0x80), (0x00,0x03,0x91,0x45,0x13,0x80),
    (0x00,0x07,0x91,0x45,0x17,0x90), (0x00,0x03,0xD1,0x45,0x13,0xC1),
    (0x00,0x05,0x89,0x20,0x87,0x00), (0x00,0x03,0x90,0x38,0x13,0x80),
    (0x00,0x87,0x88,0x20,0xA1,0x00), (0x00,0x04,0x92,0x49,0x62,0x80),
    (0x00,0x04,0x51,0x44,0xA1,0x00), (0x00,0x04,0x51,0x55,0xF2,0x80),
    (0x00,0x04,0x92,0x31,0x24,0x80), (0x00,0x04,0x92,0x48,0xE1,0x18),
    (0x00,0x07,0x82,0x31,0x07,0x80), (0x18,0x82,0x18,0x20,0x81,0x80),
    (0x10,0x41,0x00,0x10,0x41,0x00), (0x30,0x20,0x83,0x08,0x23,0x00),
    (0x29,0x40,0x00,0x00,0x00,0x00), (0x10,0xE6,0xD1,0x45,0xF0,0x00)], dtype=np.float32)

vertex = """
#version 120

uniform mat4 projection;
uniform float scale;

attribute vec4 color;
attribute vec2 position;
attribute vec3 bytes_012, bytes_345;

varying vec4 v_color;
varying vec3 v_bytes_012, v_bytes_345;
void main (void)
{
    gl_Position = projection*vec4(position*scale, 0.0, 1.0);
    gl_PointSize = 8.0 * scale;

    v_color = color;
    v_bytes_012 = bytes_012;
    v_bytes_345 = bytes_345;
}
"""

fragment = """
#version 120

// Decode a 6x8 glyph (stored in bytes 0-5)
bool glyph(vec2 P, vec3 bytes_012, vec3 bytes_345)
{
    if((P.x < 0.0) || (P.x > 5.0)) return false;
    if((P.y < 0.0) || (P.y > 7.0)) return false;

    float bytes[6];
    bytes[0] = bytes_012.x; bytes[1] = bytes_012.y; bytes[2] = bytes_012.z;
    bytes[3] = bytes_345.x; bytes[4] = bytes_345.y; bytes[5] = bytes_345.z;

    float index  = floor( (P.y*6.0+P.x)/8.0 );
    float offset = floor( mod(P.y*6.0+P.x,8.0));
    if( floor(mod(bytes[int(index)] / (128.0/pow(2.0,offset)), 2.0)) > 0.0 )
        return true;
    return false;
}

varying vec4 v_color;
varying vec3 v_bytes_012, v_bytes_345;

void main(void)
{
    vec2 uv = floor(gl_PointCoord.xy * 8.0);
    if( glyph(uv, v_bytes_012, v_bytes_345) )
        gl_FragColor = v_color;
    else
        discard;
}
"""

class Console(object):

    def __init__(self, rows, cols, scale=2):

        dtype = [("position", np.float32, 2),
                 ("color",    np.float32, 4),
                 ("glyph",    np.float32, 6)]
        self._program = gloo.Program(vertex, fragment)
        self._data = np.zeros((rows,cols), dtype).view(gloo.VertexBuffer)
        dtype = [("position",  np.float32, 2),
                 ("color",     np.float32, 4),
                 ("bytes_012", np.float32, 3),
                 ("bytes_345", np.float32, 3)]
        self._program.bind(self._data.view(dtype))

        # Initialize glyph position (they won't move)
        C,R = np.meshgrid(np.arange(cols), np.arange(rows))
        self._data["position"][...,0] = 2.0 + (0.5+C)*6
        self._data["position"][...,1] = 1.0 + (0.5+R)*10

        self._program['scale'] = int(max(scale,1))
        self._data["color"] = 0.35, 0.35, 0.35, 1.00
        self._rows, self._cols = rows, cols
        self._cursor = 0,0

    def on_resize(self, width, height):
        self._program["projection"] = glm.ortho(0, width, height, 0, -1, +1)

    def draw(self):
        self._program.draw(gl.GL_POINTS)

    def clear(self):
        self._data["glyph"] = 0
        self._cursor = 0, 0


    def write(self, text=""):
        row, col = self._cursor

        for line in text.split('\n'):
            # Clear line
            self._data["glyph"][row] = 0


            if len(line):
                # Crop text if necessary
                line = line[:self._cols]

                # Write text
                I = np.array([ord(c)-32 for c in line])
                self._data["glyph"][row,:len(line)] = font_6x8[I]

            # Update cursor and scroll if necessary
            row += 1
            if row > self._rows-1:
                self.scroll()
                row = self._rows-1
            self._cursor = row,col

    def scroll(self, n=1):
        """ Scroll up console by n lines """
        if n < self._rows:
            self._data["glyph"][:-n] = self._data["glyph"][n:]
            self._data["glyph"][-n:] = 0
        else:
            self._data["glyph"] = 0


window = app.Window(width=800, height=600)
console = Console(24,80,scale=2)
#console.write("Glumpy 2.0 (reboot !)")
#console.write("Copyright (c) 2014 Nicolas P. Rougier")
#console.write("Released under the (new) BSD license")

@window.event
def on_draw(dt):
#    console.clear()
    console._cursor = 0,0
    console.write("Estimated FPS: %.2f" % app.fps())
#    console.write("Last dt: %.5f" % dt)
    console.draw()

window.attach(console)
gl.glClearColor(1,1,1,1)
app.run()
